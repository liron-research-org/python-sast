Repository,path,line,lines,message
cr0hn__vulnerable-node,routes/login.js,23,"    var returnurl = req.body.returnurl;

    logger.error(""Tried to login attempt from user = "" + user);

    auth(user, password)
        .then(function (data) {
            req.session.logged = true;
            req.session.user_name = user;

            if (returnurl == undefined || returnurl == """"){
                returnurl = ""/"";
            }

            res.redirect(returnurl);
        })
        .catch(function (err) {
            res.redirect(""/login?returnurl="" + returnurl + ""&error="" + err.message);
        });",Untrusted user input in redirect() can result in Open Redirect vulnerability.
cr0hn__vulnerable-node,routes/login_check.js,6,"        res.redirect(""/login?returnurl="" + req.url);",Untrusted user input in redirect() can result in Open Redirect vulnerability.
cr0hn__vulnerable-node,app.js,26,"var accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'))","The application dynamically constructs file or path information. If the path
information comes from user-supplied input, it could be abused to read sensitive files,
access other users' data, or aid in exploitation to gain further system access.

User input should never be used in constructing paths or files for interacting
with the filesystem. This includes filenames supplied by user uploads or downloads.
If possible, consider hashing user input or using unique values and
use `path.normalize` to resolve and validate the path information
prior to processing any file functionality.

Example using `path.normalize` and not allowing direct user input:
```
// User input, saved only as a reference
// id is a randomly generated UUID to be used as the filename
const userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};
// Restrict all file processing to this directory only
const basePath = '/app/restricted/';

// Create the full path, but only use our random generated id as the filename
const joinedPath = path.join(basePath, userData.id);
// Normalize path, removing any '..'
const fullPath = path.normalize(joinedPath);
// Verify the fullPath is contained within our basePath
if (!fullPath.startsWith(basePath)) {
    console.log(""Invalid path specified!"");
}
// Process / work with file
// ...
```

For more information on path traversal issues see OWASP:
https://owasp.org/www-community/attacks/Path_Traversal
"
